#+title: Juliaorg


#+begin_src julia :results file graphics :file plot.svg
using Plots
heatmap(rand(100,100));
savefig("plot.svg")
#+end_src

#+RESULTS:
[[file:plot.svg]]

#+begin_src julia   :results value :session true
using Plots
rand(10)
#+end_src

#+RESULTS:
|  0.5288690638666418 |
|  0.9294854914062045 |
|  0.6584898280674399 |
| 0.25511133017268206 |
|  0.6737558291789522 |
|  0.5991589233911294 |
|  0.5751512584010119 |
|  0.5918840923793762 |
|  0.2214452717603964 |
|  0.8733581822793539 |

#+begin_src julia-vterm :results value
rand(10,10)
#+end_src

#+RESULTS:
#+begin_example
10×10 Matrix{Float64}:
 0.237844   0.882478  0.425321   0.678984   …  0.498813   0.534239  0.0163642
 0.144306   0.11907   0.018728   0.584942      0.613721   0.478082  0.903374
 0.0375887  0.467845  0.917088   0.837937      0.35362    0.192936  0.28423
 0.411957   0.353532  0.537441   0.0373549     0.158253   0.601779  0.876357
 0.218118   0.863978  0.444418   0.428357      0.433613   0.847806  0.737759
 0.310713   0.893358  0.44952    0.923035   …  0.468275   0.185906  0.949623
 0.236245   0.790577  0.209735   0.263729      0.0476542  0.696081  0.783653
 0.833519   0.429279  0.879132   0.982198      0.296779   0.381079  0.901607
 0.193185   0.960618  0.0802141  0.979389      0.9731     0.432008  0.618607
 0.521807   0.103692  0.844004   0.810899      0.687499   0.687568  0.427784
#+end_example

#+begin_src julia-vterm
include(pwd() * "/" * "utils.jl")
include(pwd() * "/" * "multisolver.jl")
using Plots
using LinearAlgebra
using ProgressBars

SIZE =32
M = testdata(SIZE, 5, 8 , 2)
testgrd = testgrid(M, 2)
solver = testgrd[1]
set_xi_and_psi!(solver)
#
n=100
pbar = ProgressBar(total = 10*n)
massbal = zeros(0)
oldphase = testgrd[1].phase
anim = @animate for i in 1:n
    for j in 1:10
        v_cycle(testgrd, 1)
        update(pbar)
        end
    set_xi_and_psi!(testgrd[1])
    h = heatmap(testgrd[1].phase , clim =(-1,1) , framestyle=:none , legend=false, lims=(1,size(testgrd[1].phase)[1]), aspect_ratio=:equal, title  = "phasefield with size $SIZE" )
    push!(massbal , sum(testgrd[1].phase))
    p = plot(1:i , massbal .-massbal[1] , xlim=(1,n),ylim=(-0.02 , 0.02),  title = "Mass change per timestep")
    plot(h, p;)
    oldphase = testgrd[1].phase
    set_description(pbar, "massbal: $(massbal[1]-massbal[i])")
end
gif(anim , "images/iteration_6.gif" , fps = 10)
#+end_src

#+RESULTS:

#+begin_src julia-vterm
include(pwd() * "/" * "utils.jl")
include(pwd() * "/" * "multisolver.jl")
using Plots
using LinearAlgebra
using ProgressBars

SIZE =64
M = fill(-1,SIZE,SIZE)
incirc = filter(x-> norm(x.I .- (SIZE/2 , SIZE/2)) < 12 , CartesianIndices(M))
M[incirc] .= 1

testgrd = testgrid(M, 2)
solver = testgrd[1]
set_xi_and_psi!(solver)
#
n=100
pbar = ProgressBar(total = 10*n)
massbal = zeros(0)
oldphase = testgrd[1].phase
anim = @animate for i in 1:n
    for j in 1:10
        v_cycle(testgrd, 1)
        update(pbar)
        end
    set_xi_and_psi!(testgrd[1])
    h = heatmap(testgrd[1].phase , clim =(-1,1) , framestyle=:none , legend=false, lims=(1,size(testgrd[1].phase)[1]), aspect_ratio=:equal, title  = "phasefield with size $SIZE" )
    push!(massbal , sum(testgrd[1].phase))
    p = plot(1:i , massbal .-massbal[1] , xlim=(1,n),ylim=(-0.02 , 0.02),  title = "Mass change per timestep")
    plot(h, p;)
    oldphase = testgrd[1].phase
    set_description(pbar, "massbal: $(massbal[1]-massbal[i])")
end
gif(anim , "images/sphere_3.gif" , fps = 10)
#+end_src

#+RESULTS:
